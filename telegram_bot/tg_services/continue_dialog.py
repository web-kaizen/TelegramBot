import asyncio
from itertools import groupby
from operator import itemgetter
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder
from django.core.cache import cache
from django.db.models import Q
from .start import start
from .main_menu import main_menu
from services import DialogueOptionalUpdate, BotList
from .start_dialogue import get_cached_data
from telegram_bot.models import UserStatistic

router = Router()

DIALOGUE_OPTIONAL_UPDATE_OPTIONS: dict = {
    200: object,
    204: object,
    400: "–ü–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!‚ö†Ô∏è",
    401: "Invalid access token!‚ö†Ô∏è",
    403: "Dialogue access denied‚ö†Ô∏è",
    404: "No data was found, please try again later!‚ö†Ô∏è",
    409: "Bot version conflict!‚ö†Ô∏è",
    422: "Bot error‚ö†Ô∏è",
    500: "Internal server error, please try again later!‚õîÔ∏è"
}


@router.callback_query(F.data.startswith('continue_dialog'))
async def change_dialogue_options(clb):
    tg_user_id = clb.from_user.id
    select_option_message = clb.message
    selected_model = int(clb.data.split(":")[1])
    token, dialogue_id, model_id = await get_cached_data(user_id=tg_user_id)
    bot_list = BotList.BotList(need_execute_local=True, use_cache=False).get_response()
    user_stats = UserStatistic.objects.filter(Q(user__user_id=tg_user_id) & Q(model_id=selected_model)).first()

    if user_stats.current_dialogues >= user_stats.max_dialogues:
        available_bots = []
        for bot in bot_list:
            user_stats2 = UserStatistic.objects.filter(Q(user__user_id=tg_user_id) & Q(model_id=bot['id'])).first()
            if user_stats2.current_dialogues < user_stats2.max_dialogues:
                available_bots.append(bot)

        if not available_bots:
            await clb.message.answer("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∏–∞–ª–æ–≥–æ–≤ —Å–æ –≤—Å–µ–º–∏ –º–æ–¥–µ–ª—è–º–∏")
            await main_menu(clb)
            return

        keyboard_builder = InlineKeyboardBuilder()
        for bot in available_bots:
            keyboard_builder.add(
                InlineKeyboardButton(text=bot["model_name"], callback_data=f"continue_dialog:{bot['id']}"))

        keyboard_builder.row(InlineKeyboardButton(text="<- BACK", callback_data='main_menu'))

        await clb.message.answer(
            text=f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –º–æ–¥–µ–ª—å—é: {user_stats.name}"
                 "–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –º–æ–¥–µ–ª–∏, –ø–æ—Å–∫–æ–ª—å–∫—É –¥–ª—è –Ω–∏—Ö –µ—â–µ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤."
                 "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å —Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–∞—à –¥–∏–∞–ª–æ–≥.",
            reply_markup=keyboard_builder.as_markup()
        )

    data = {
        "bot_id": selected_model
    }
    dialogue_update = DialogueOptionalUpdate.DialogueOptionalUpdate(dialogue_id=dialogue_id, data=data, token=token, need_execute_local=True)
    dialogue_update_data = dialogue_update.get_response()  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç {'bot_id': 2}

    dialogue_update_result = DIALOGUE_OPTIONAL_UPDATE_OPTIONS[dialogue_update._status_code]
    if dialogue_update_result is object:
        successful_data = await clb.message.answer("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")
        await asyncio.sleep(0.5)
        await successful_data.delete()

        dialogue_update_data["id"] = dialogue_id
        dialogue_update_data["name"] = f"Dialogue No.{dialogue_id}"
        cache.set(
            key=f"dialogue_{tg_user_id}",
            value=dialogue_update_data,
            timeout=60 * 60 * 24 * 5  # 5 –¥–µ–Ω—å
        )

        await clb.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å!üë®‚Äçüíª")
        await select_option_message.delete()

    elif type(dialogue_update_result) is str:
        await clb.message.answer(text=dialogue_update_result)
        return await start(clb=clb)


@router.message(F.text.lower() == "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥")
async def continue_dialog(msg: Message):
    tg_user_id = msg.from_user.id
    token, dialogue_id, model_id = await get_cached_data(user_id=tg_user_id)
    bot_list_response = BotList.BotList(need_execute_local=True, use_cache=False).get_response()

    '''
    –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–≤—Ç–æ—Ä–∞–º 
    ({–ê–≤—Ç–æ—Ä: [–º–æ–¥–µ–ª–∏ -> [id, name]]}) -> 
    {'OpenAI': [
        [2, 'Gpt-3.5 16K'],
        [3, 'Gpt-4 8K']
    ]}
    '''
    bot_list_result = {key: [[item["id"], item["model_name"]]
                             for item in group
                             if item['status_code'] == "active"
                             and
                             item["id"] != model_id]
                       for
                       key, group in
                       groupby(bot_list_response, key=itemgetter("author"))}

    builder = InlineKeyboardBuilder()

    for author, models in bot_list_result.items():
        for model_id, model_name in models:
            print(model_id, model_name)
            builder.add(InlineKeyboardButton(text=model_name, callback_data=f"continue_dialog:{model_id}"))

    builder.row(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data="cancel_changes"))

    ended_dialogue_message = await msg.answer(text="–ü–æ–Ω—è–ª! ‚úÖ", reply_markup=ReplyKeyboardRemove())  # —É–¥–∞–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await asyncio.sleep(0.5)
    await ended_dialogue_message.delete()

    await msg.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å —Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–∞—à –¥–∏–∞–ª–æ–≥."
             "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –ø–æ—ç—Ç–æ–º—É –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç '–ø–æ–º–Ω–∏—Ç—å' –≤–µ—Å—å –¥–∏–∞–ª–æ–≥.",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "cancel_changes")
async def cancel_changes(clb: CallbackQuery):
    select_option_message = clb.message
    await clb.message.answer("–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—â–µ–Ω–∏–µ! ‚úÖ")
    await select_option_message.delete()
